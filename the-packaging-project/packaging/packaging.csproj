<Project Sdk="Microsoft.Build.NoTargets/3.5.6">
    <PropertyGroup>
        <TargetFramework>net7.0</TargetFramework>

        <!--
            Minimal properties to set for generating a NuGet package. For more info, see:
            https://learn.microsoft.com/nuget/create-packages/package-authoring-best-practices#package-metadata
        -->
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <PackageId>My.Custom.Package</PackageId>

        <!--
            NoWarn NU5100 if your package layout isn't the "traditional" layout.
            https://learn.microsoft.com/nuget/reference/errors-and-warnings/nu5100
        -->
        <NoWarn>$(NoWarn);NU5100</NoWarn>
    </PropertyGroup>

    <ItemGroup>
        <!-- Example of manually gathering build outputs. -->
        <None Include="../ClassLib/staticfile.foo" Pack="true" PackagePath="extras" />

        <!-- 
            Example of trying to glob a generated file too soon.
            There will not be a `foo` folder in `extras` because `GeneratedFile` wasn't found.
            Note: Clean the `ClassLib` project before building this project to see this in action.
        -->
        <Content Include="../ClassLib/*.xml" PackagePath="extras/foo" />
    </ItemGroup>

    <ItemGroup>
        <!-- 
            Private=true (default): Allows copying outputs from ProjectReferences.
            Private=false: Prevents outputs from being copied. (Overrides ReferenceOutputAssembly="true")

            ReferenceOutputAssembly=true: Copies the .dll/.pdb into the output folder. (default in Microsoft.NET.Sdk)
            ReferenceOutputAssembly=false: Does not copy the .dll/.pdb into the output folder. (default in Microsoft.Build.NoTargets)
        -->
        <ProjectReference Include="../ConsoleApp/ConsoleApp.csproj" Private="false" OutputItemType="ConsoleAppOutput" />
        <!-- ClassLib does not "double build" and we still get the output. -->
        <ProjectReference Include="../ClassLib/ClassLib.csproj" OutputItemType="ClassLibOutput" />
        <ProjectReference Include="../OtherLib/OtherLib.csproj" OutputItemType="OtherLibOutput" />
    </ItemGroup>

    <Target Name="GatherBuildOutputsForPack" AfterTargets="Build" BeforeTargets="Pack">
        <ItemGroup>
            <!-- Place the dll's into the nupkg -->
            <Content Include="@(ConsoleAppOutput)" PackagePath="app"/>
            <Content Include="@(ClassLibOutput)" PackagePath="app"/>
            <Content Include="@(OtherLibOutput)" PackagePath="lib/net7.0" />

            <!-- 
                Example of manually referencing files.
                Note: These files could be added to content outside of a target
                      because they always exist.
            -->
            <Content Include="README.md" PackagePath="" />
            <!--
                Sometimes you can't avoid looking directly into `bin/`.
                You can also consider telling the ProjectReference to OtherLib
                to build a custom target that returns this file specifically.
                It would then be included in @(OtherLibOutput).
            -->
            <Content Include="../OtherLib/$(OutDir)/someFile.foo" PackagePath="extras" />

            <!-- 
                Example of globbing that must occur from a target, after the file was generated.
                See above where globbing would have placed these files into `extras/foo`, but fails
                to do so because the xml files didn't exist at the time the glob was checked.
            -->
            <Content Include="../ClassLib/*.xml" PackagePath="extras" />
        </ItemGroup>
    </Target>
</Project>